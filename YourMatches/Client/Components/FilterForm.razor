@inject HttpClient _http
<EditForm Model="@Request">
    <div>
        Leagues: <br />
        @foreach (var leagueOption in SupportedOptions.LeaguesNames)
        {
            //Request.LeaguesChecked.Add(leagueOption.Key);
            @*<InputCheckbox @onchange="eventargs => { LeagueChanged(leagueOption.Key, eventargs.Value); }">@leagueOption.Value</InputCheckbox>*@
            <input type="checkbox" checked @onchange="eventArgs => { LeagueOptionCheckChanged(leagueOption.Key, eventArgs.Value); }"/>@leagueOption.Value<br />
        }
    </div>
    <div>
        Match status: <br />
        @foreach (var statusOption in SupportedOptions.StatusNames)
        {
            //Request.StatusChecked.Add(statusOption.Key);
            <input type="checkbox" checked @onchange="eventArgs => { StatusOptionCheckChanged(statusOption.Key, eventArgs.Value); }"  /> @statusOption.Value<br/>
        }
    </div>
    <input type="submit" value="Submit" class="btn btn-primary" @onclick="OnSubmitCallback"/>
</EditForm>
@code {
    [Parameter]
    public RequestDto Request { get; set; }

    [Parameter]
    public EventCallback OnSubmitCallback { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {

        }
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        foreach (var leagueOption in SupportedOptions.LeaguesNames)
        {
            if (!Request.LeaguesChecked.Contains(leagueOption.Key))
            {
                Request.LeaguesChecked.Add(leagueOption.Key);
                Console.WriteLine(leagueOption.Key.ToString() + "added");
            }
        }
        foreach (var statusOption in SupportedOptions.StatusNames)
        {
            if (!Request.StatusChecked.Contains(statusOption.Key))
            {
                Request.StatusChecked.Add(statusOption.Key);
            }
        }
    }

    private void LeagueOptionCheckChanged(League league, object checkedValue)
    {
        if((bool)checkedValue && !Request.LeaguesChecked.Contains(league))
        {
            Request.LeaguesChecked.Add(league);
        }
        else
        {
            Request.LeaguesChecked.Remove(league);
            Console.WriteLine(league.ToString() + "removed");
        }
    }

    private void StatusOptionCheckChanged(Status status, object checkedValue)
    {
        if ((bool)checkedValue && !Request.StatusChecked.Contains(status))
        {
            Request.StatusChecked.Add(status);
        }
        else
        {
            Request.StatusChecked.Remove(status);
            Console.WriteLine(status.ToString() + "removed");
        }
    }
}
