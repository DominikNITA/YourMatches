@inject HttpClient _http
@using YourMatches.Client.Components.FilterFormComponents

    <EditForm Model="@Request" OnValidSubmit="OnSubmitCallback" class="d-flex flex-column justify-content-center">
        <DataAnnotationsValidator />

        <div class="d-flex flex-column flex-md-row align-items-stretch justify-content-center flex-wrap">
            <OptionsSelectionComponent Title="Leagues:">
                @foreach (var leagueOption in SupportedOptions.LeaguesNames)
                {
                    <div>
                        <input type="checkbox" id="@leagueOption.Key.ToString()-checkbox" checked @onchange="eventArgs => { LeagueOptionCheckChanged(leagueOption.Key, eventArgs.Value); }" />
                        <label class="form-check-label" for="@leagueOption.Key.ToString()-checkbox">@leagueOption.Value</label>
                    </div>
                }
                <ValidationMessage For="@( () => Request.LeaguesChecked)"></ValidationMessage>
            </OptionsSelectionComponent>

            <OptionsSelectionComponent Title="Match status:">
                @foreach (var statusOption in SupportedOptions.StatusNames)
                {
                    <div>
                        <input type="checkbox" checked id="@statusOption.Key.ToString()-checkbox" @onchange="eventArgs => { StatusOptionCheckChanged(statusOption.Key, eventArgs.Value); }" />
                        <label class="form-check-label" for="@statusOption.Key.ToString()-checkbox">@statusOption.Value</label>
                    </div>
                }
                <ValidationMessage For="@( () => Request.StatusChecked)"></ValidationMessage>
            </OptionsSelectionComponent>

            <OptionsSelectionComponent Title="Choose time span:">
                <div class="d-flex flex-column">
                    @if (!Request.IsEndingDateSelected)
                    {
                        <DatePickerComponent Title="Date: ">
                            <input type="date" @bind-value="Request.StartingDate" />
                        </DatePickerComponent>
                    }
                    else
                    {
                        <DatePickerComponent Title="From: ">
                            <input type="date" @bind-value="Request.StartingDate" />
                        </DatePickerComponent>
                        <DatePickerComponent Title="To:">
                            <input type="date" @bind-value="Request.EndingDate" />
                        </DatePickerComponent>
                    }
                </div>
                <div class="py-1 d-flex justify-content-center align-items-center">
                    <input type="checkbox" id="ending-date-checkbox" @onchange="eventArgs => { EndingDateSelectionChanged(eventArgs.Value); }" />
                    <label class="form-check-label" for="ending-date-checkbox">Select range of time</label>
                </div>
                <ValidationMessage For="@( () => Request.StartingDate )"></ValidationMessage>
            </OptionsSelectionComponent>
        </div>

        <input type="submit" value="Search" class="start-search-button" />
    </EditForm>
@code {
    [Parameter]
    public RequestDto Request { get; set; }
    [Parameter]
    public EventCallback OnSubmitCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        foreach (var leagueOption in SupportedOptions.LeaguesNames)
        {
            if (!Request.LeaguesChecked.Contains(leagueOption.Key))
            {
                Request.LeaguesChecked.Add(leagueOption.Key);
            }
        }
        foreach (var statusOption in SupportedOptions.StatusNames)
        {
            if (!Request.StatusChecked.Contains(statusOption.Key))
            {
                Request.StatusChecked.Add(statusOption.Key);
            }
        }
        await OnSubmitCallback.InvokeAsync(Request);
    }

    private void LeagueOptionCheckChanged(League league, object checkedValue)
    {
        if ((bool)checkedValue && !Request.LeaguesChecked.Contains(league))
        {
            Request.LeaguesChecked.Add(league);
        }
        else
        {
            Request.LeaguesChecked.Remove(league);
        }
    }

    private void StatusOptionCheckChanged(Status status, object checkedValue)
    {
        if ((bool)checkedValue && !Request.StatusChecked.Contains(status))
        {
            Request.StatusChecked.Add(status);
        }
        else if (!(bool)checkedValue)
        {
            Request.StatusChecked.Remove(status);
        }
    }

    private void EndingDateSelectionChanged(object checkedValue)
    {
        Request.IsEndingDateSelected = (bool)checkedValue;
        if (Request.IsEndingDateSelected)
        {
            // Sets the initial time delay in days for the second date picker
            int initialTimeRange = 1;
            Request.EndingDate = Request.StartingDate.AddDays(initialTimeRange);
        }
    }
}
