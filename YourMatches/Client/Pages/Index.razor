@page "/"
@inject HttpClient Http
<LandingLogo></LandingLogo>
<h1>Hello, football man!</h1>
<FilterForm OnSubmitCallback="@GetMatches" Request="req"></FilterForm>

@* Order of conditions matters *@
<div>@if (_isRequestLimitAchieved)
{
    <span class="my-3 alert alert-danger">Limit of submits reached. Please try again in a while :(</span>
}
else if (matches == null)
{
    @:Loading Matches...
}
else if (matches.Count() == 0)
{
    <span class="my-3 alert alert-info" >No matches found for this day/range. Please select another date or choose another search options :)</span>
}
else
{
    <div class="container col-12">
        <div class="row justify-content-center align-items-stretch">
            @foreach (var match in matches)
            {
                <ScheduledMatch Match="match"></ScheduledMatch>
            }
        </div>
    </div>
}</div>

<FooterComponent></FooterComponent>
@code{
    private List<ScheduledMatchDto> matches;
    protected RequestDto req = new RequestDto();
    private bool _isRequestLimitAchieved = false;

    protected async void GetMatches()
    {
        matches = null;
        _isRequestLimitAchieved = false;
        try
        {
            matches = await Http.PostJsonAsync<List<ScheduledMatchDto>>("match", req);
            if (matches == null)
            {
                matches = new List<ScheduledMatchDto>();
            }
        }
        catch (Exception)
        {
            _isRequestLimitAchieved = true;
        }
        StateHasChanged();
    }
}