@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities


<div class="col-12 col-md-8 col-xl-6 mt-3 mb-5 top-header">
    <h1 class="mx-auto">Hello, football fan!</h1>
    <p>This app allows you to check upcoming matches from top five european leagues. You can select specific date or date span of maximum 10 days. Live scores update on resubmit of form. If you would like to add some new features feel free to send them to me via <a href="https://github.com/DominikNITA/YourMatches">Github</a>.</p>
    <p>All trademarks are the property of their respective owners and are used to facilitate identification of clubs</p>
</div>
<FilterForm OnSubmitCallback="@SetQueryString" Request="request"></FilterForm>
@* Order of conditions matters *@
@if (_isRequestLimitAchieved)
{
    <div class="information">
        <div class="my-3 alert alert-danger">Limit of submits reached. Please try again in a while :(</div>
    </div>
}
else if (matches == null)
{
    <LoadingComponent></LoadingComponent>
}
else if (matches.Count() == 0)
{
    <div class="information">
        <div class="my-3 alert alert-info">No matches found for this day/range. Please select another date or choose another search options :)</div>
    </div>
}
else
{
    <div class="container col-12 col-md-8 col-lg-6 my-3">
        <div class="row justify-content-center align-items-stretch">
            @foreach (var match in matches)
            {
                <ScheduledMatch Match="match"></ScheduledMatch>
            }
        </div>
    </div>
}

@code{
    List<ScheduledMatchDto> matches;
    RequestDto request = new RequestDto();
    bool _isRequestLimitAchieved = false;

    void SetQueryString()
    {
        var query = request.GetQueryDictionary();
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri, query));
    }

    protected async Task GetMatches()
    {
        matches = null;
        _isRequestLimitAchieved = false;
        try
        {
            var response = await Http.PostAsJsonAsync("match", request);
            matches = await response.Content.ReadFromJsonAsync<List<ScheduledMatchDto>>();
            if (matches == null)
            {
                matches = new List<ScheduledMatchDto>();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            _isRequestLimitAchieved = true;
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        request.TryGetStateFromQuery(NavigationManager);
        await GetMatches();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}