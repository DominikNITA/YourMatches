@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities

<TopHeader></TopHeader>

<FilterForm OnSubmitCallback="@SetQueryString" Request="request"></FilterForm>

@* Order of conditions matters *@
@if (_isRequestLimitAchieved)
{
    <div class="information">
        <div class="my-3 alert alert-danger">Limit of submits reached. Please try again in a while :(</div>
    </div>
}
else if (matches == null)
{
    <LoadingComponent></LoadingComponent>
}
else if (matches.Count() == 0)
{
    <div class="information">
        <div class="my-3 alert alert-info">No matches found for this day/range. Please select another date or choose another search options :)</div>
    </div>
}
else
{
    @foreach (var match in matches)
    {
        <ScheduledMatch Match="match"></ScheduledMatch>
    }

}

@code{
    List<ScheduledMatchDto> matches;
    RequestDto request = null;
    bool _isRequestLimitAchieved = false;

    void SetQueryString()
    {
        var query = request.GetQueryDictionary();
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri, query));
    }

    protected async Task GetMatches()
    {
        matches = null;
        _isRequestLimitAchieved = false;
        try
        {
            var response = await Http.PostAsJsonAsync("match", request);
            matches = await response.Content.ReadFromJsonAsync<List<ScheduledMatchDto>>();
            if (matches == null)
            {
                matches = new List<ScheduledMatchDto>();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            _isRequestLimitAchieved = true;
        }
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        HandleLocationChanged(null, null);
    }

    //protected async override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        request.TryGetStateFromQuery(NavigationManager);
    //        await GetMatches();
    //    }
    //}

    async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Console.WriteLine("In HandleLocationChanged!");
        if (request == null) request = new RequestDto();
        request.TryGetStateFromQuery(NavigationManager);
        await GetMatches();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}